{"version":3,"sources":["components/Task.jsx","components/TaskList.jsx","components/Footer.jsx","components/NewTaskForm.jsx","components/App.jsx","index.jsx"],"names":["Task","props","handleChange","event","setState","editValue","target","value","startTimer","isPlay","timerId","setInterval","timeTodo","state","compareAsc","Date","isTimeUp","addSeconds","stopTimer","clearInterval","data","label","time","this","tick","initTimerID","formatDistanceToNow","onDelete","onToggleDone","onEdit","offEdit","id","done","editing","classes","cn","completed","styles","color","undefined","className","type","checked","onChange","style","onClick","format","aria-labelledby","onSubmit","name","React","Component","TaskList","list","map","item","key","Footer","children","clearAll","itemsLeft","TasksFilter","filter","activeFilter","buttons","selected","NewTaskForm","handleInput","handleMinutes","minutes","handleSeconds","seconds","clear","addItem","placeholder","App","currentId","otherProps","val","preventDefault","clearCallback","minutesInput","secondsInput","date","newItem","uniqid","now","i","length","filteredData","index","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.1c66ecb5.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\nimport { formatDistanceToNow, format, addSeconds, compareAsc } from 'date-fns';\n\nexport default class Task extends React.Component {\n  static propTypes = {\n    data: PropTypes.exact({\n      label: PropTypes.string,\n      id: PropTypes.string,\n      time: PropTypes.number,\n      timeTodo: PropTypes.any,\n      done: PropTypes.bool,\n      editing: PropTypes.bool,\n    }).isRequired,\n    onDelete: PropTypes.func.isRequired,\n    onToggleDone: PropTypes.func.isRequired,\n    onEdit: PropTypes.func.isRequired,\n    offEdit: PropTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      editValue: props.data.label,\n      time: props.data.time,\n      timeTodo: props.data.timeTodo,\n      isTimeUp: false,\n      isPlay: false,\n    };\n  }\n\n  componentDidMount() {\n    this.tick();\n    this.initTimerID = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.initTimerID);\n    clearInterval(this.timerId);\n  }\n\n  handleChange = (event) => {\n    this.setState({\n      editValue: event.target.value,\n    });\n  };\n\n  startTimer = () => {\n    this.setState(({ isPlay }) => ({\n      isPlay: !isPlay,\n    }));\n    this.timerId = setInterval(() => {\n      const { timeTodo } = this.state;\n      const isTimeUp = compareAsc(new Date(0, 0, 1, 0, 0, 1), timeTodo);\n      if (isTimeUp === 1) {\n        this.setState({\n          isTimeUp: true,\n        });\n      } else {\n        this.setState({\n          isTimeUp: false,\n        });\n      }\n      this.setState(() => ({\n        timeTodo: addSeconds(timeTodo, -1),\n      }));\n    }, 1000);\n  };\n\n  stopTimer = () => {\n    this.setState(({ isPlay }) => ({\n      isPlay: !isPlay,\n    }));\n    clearInterval(this.timerId);\n  };\n\n  tick() {\n    const { data } = this.props;\n    this.setState({\n      time: formatDistanceToNow(new Date(data.time)),\n    });\n  }\n\n  render() {\n    const { editValue, time, timeTodo, isTimeUp, isPlay } = this.state;\n    const { data, onDelete, onToggleDone, onEdit, offEdit } = this.props;\n    const { label, id, done, editing } = data;\n    const classes = cn({\n      completed: done,\n      editing,\n    });\n    const styles = isTimeUp ? { color: 'red' } : undefined;\n    return (\n      <li className={classes} id={id}>\n        <div className=\"view\">\n          <input className=\"toggle\" type=\"checkbox\" checked={done} onChange={onToggleDone(id)} />\n          <label>\n            <span id={`button-edit-${id}`} className=\"title\" style={styles}>\n              {label}\n            </span>\n            <span className=\"description\">\n              {isPlay ? (\n                <button type=\"button\" className=\"icon icon-pause\" onClick={this.stopTimer} label=\"pause\" />\n              ) : (\n                <button type=\"button\" className=\"icon icon-play\" onClick={this.startTimer} label=\"play\" />\n              )}\n              <span className=\"spent-time\">{format(timeTodo, 'mm:ss')}</span>\n            </span>\n            <span id={`button-destroy-${id}`} className=\"description\">\n              created {time} ago\n            </span>\n          </label>\n          <button type=\"button\" className=\"icon icon-edit\" onClick={onEdit(id)} aria-labelledby={`button-edit-${id}`} />\n          <button\n            type=\"button\"\n            className=\"icon icon-destroy\"\n            onClick={onDelete(id)}\n            aria-labelledby={`button-destroy-${id}`}\n          />\n        </div>\n        {editing && (\n          <form className=\"editing-wrapper\" onSubmit={offEdit(id, editValue)}>\n            <input name=\"input\" type=\"text\" className=\"edit\" value={editValue} onChange={this.handleChange} />\n            <button type=\"submit\">OK</button>\n          </form>\n        )}\n      </li>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Task from './Task';\n\nconst TaskList = ({ data, ...props }) => {\n  const list = data.map((item) => <Task key={item.id} data={item} {...props} />);\n  return <ul className=\"todo-list\">{list}</ul>;\n};\nTaskList.propTypes = {\n  data: PropTypes.arrayOf(\n    PropTypes.shape({\n      label: PropTypes.string,\n      id: PropTypes.string,\n      time: PropTypes.number,\n      done: PropTypes.bool,\n      editing: PropTypes.bool,\n    })\n  ).isRequired,\n  onDelete: PropTypes.func.isRequired,\n  onToggleDone: PropTypes.func.isRequired,\n  onEdit: PropTypes.func.isRequired,\n  offEdit: PropTypes.func.isRequired,\n};\nexport default TaskList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport cn from 'classnames';\n\nconst TasksFilter = ({ filter, activeFilter }) => {\n  const buttons = [\n    { label: 'All', id: 'all' },\n    { label: 'Active', id: 'active' },\n    { label: 'Completed', id: 'completed' },\n  ].map(({ label, id }) => {\n    const classes = cn({\n      selected: activeFilter === id,\n    });\n    return (\n      <li key={id}>\n        <button type=\"button\" className={classes} id={id} onClick={filter}>\n          {label}\n        </button>\n      </li>\n    );\n  });\n  TasksFilter.propTypes = {\n    filter: PropTypes.func.isRequired,\n    activeFilter: PropTypes.string.isRequired,\n  };\n  return <ul className=\"filters\">{buttons}</ul>;\n};\n\nexport default class Footer extends React.Component {\n  static TasksFilter = TasksFilter;\n\n  static propTypes = {\n    children: PropTypes.node.isRequired,\n    clearAll: PropTypes.func.isRequired,\n    itemsLeft: PropTypes.func.isRequired,\n  };\n\n  render() {\n    const { children, clearAll, itemsLeft } = this.props;\n    return (\n      <footer className=\"footer\">\n        <span className=\"todo-count\">{itemsLeft()} items left</span>\n        {children}\n        <button type=\"button\" className=\"clear-completed\" onClick={clearAll}>\n          Clear completed\n        </button>\n      </footer>\n    );\n  }\n}\n","import React from 'react';\nimport PropsTypes from 'prop-types';\n\nexport default class NewTaskForm extends React.Component {\n  static propTypes = {\n    addItem: PropsTypes.func.isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: '',\n      minutes: '',\n      seconds: '',\n    };\n  }\n\n  handleInput = (event) => {\n    this.setState({\n      value: event.target.value,\n    });\n  };\n\n  handleMinutes = (event) => {\n    this.setState({\n      minutes: event.target.value,\n    });\n  };\n\n  handleSeconds = (event) => {\n    this.setState({\n      seconds: event.target.value,\n    });\n  };\n\n  clear = () => {\n    this.setState({\n      value: '',\n      minutes: '',\n      seconds: '',\n    });\n  };\n\n  render() {\n    const { value, minutes, seconds } = this.state;\n    const { addItem } = this.props;\n    return (\n      <form className=\"new-todo-form\" onSubmit={addItem(value, this.clear)}>\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" value={value} onChange={this.handleInput} />\n        <input\n          id=\"minutesInput\"\n          className=\"new-todo-form__timer\"\n          placeholder=\"Min\"\n          value={minutes}\n          onChange={this.handleMinutes}\n        />\n        <input\n          id=\"secondsInput\"\n          className=\"new-todo-form__timer\"\n          placeholder=\"Sec\"\n          value={seconds}\n          onChange={this.handleSeconds}\n        />\n        <button type=\"submit\">ADD</button>\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport uniqid from 'uniqid';\nimport TaskList from './TaskList';\nimport Footer from './Footer';\nimport NewTaskForm from './NewTaskForm';\n\nexport default class App extends React.Component {\n  static propTypes = {\n    data: PropTypes.arrayOf(\n      PropTypes.shape({\n        label: PropTypes.string,\n        id: PropTypes.string,\n        time: PropTypes.number,\n        done: PropTypes.bool,\n        editing: PropTypes.bool,\n      })\n    ).isRequired,\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: props.data,\n      activeFilter: 'all',\n    };\n  }\n\n  onToggleDone = (currentId) => () => {\n    this.setState(({ data }) => {\n      const newData = data.map((item) => {\n        const { done, ...otherProps } = item;\n        if (item.id === currentId) {\n          return {\n            ...otherProps,\n            done: !done,\n          };\n        }\n        return item;\n      });\n      return {\n        data: newData,\n      };\n    });\n  };\n\n  onEdit = (currentId) => () => {\n    this.setState(({ data }) => {\n      const newData = data.map((item) => {\n        const { editing, ...otherProps } = item;\n        if (item.id === currentId) {\n          return {\n            ...otherProps,\n            editing: !editing,\n          };\n        }\n        return item;\n      });\n      return {\n        data: newData,\n      };\n    });\n  };\n\n  offEdit = (currentId, val) => (event) => {\n    event.preventDefault();\n    if (val === '') return;\n    this.setState(({ data }) => {\n      const newData = data.map((item) => {\n        const { editing, label, ...otherProps } = item;\n        if (item.id === currentId) {\n          return {\n            ...otherProps,\n            editing: !editing,\n            label: val,\n          };\n        }\n        return item;\n      });\n      return {\n        data: newData,\n      };\n    });\n  };\n\n  onDelete = (currentId) => () => {\n    this.setState(({ data }) => ({\n      data: data.filter(({ id }) => currentId !== id),\n    }));\n  };\n\n  filter = (event) => {\n    this.setState({\n      activeFilter: event.target.id,\n    });\n  };\n\n  addItem = (val, clearCallback) => (event) => {\n    event.preventDefault();\n    const minutes = event.target.minutesInput.value;\n    const seconds = event.target.secondsInput.value;\n    const date = new Date(0, 0, 1, 0, minutes, seconds);\n    if (val === '') return;\n    this.setState(({ data }) => {\n      const newItem = {\n        label: val,\n        id: uniqid(),\n        time: Date.now(),\n        timeTodo: date,\n        done: false,\n        editing: false,\n      };\n      clearCallback();\n      return {\n        data: [newItem, ...data],\n      };\n    });\n  };\n\n  clearAll = () => {\n    this.setState({\n      data: [],\n    });\n  };\n\n  itemsLeft = () => {\n    const { data } = this.state;\n    return data.filter((i) => !i.done).length;\n  };\n\n  render() {\n    const { data, activeFilter } = this.state;\n    const filteredData = data.filter(({ done }) => {\n      switch (activeFilter) {\n        case 'active':\n          return !done;\n        case 'completed':\n          return done;\n        default:\n          return true;\n      }\n    });\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <NewTaskForm addItem={this.addItem} />\n        </header>\n        <section className=\"main\">\n          <TaskList\n            data={filteredData}\n            onDelete={this.onDelete}\n            onToggleDone={this.onToggleDone}\n            onEdit={this.onEdit}\n            offEdit={this.offEdit}\n          />\n          <Footer clearAll={this.clearAll} itemsLeft={this.itemsLeft}>\n            <Footer.TasksFilter filter={this.filter} activeFilter={activeFilter} />\n          </Footer>\n        </section>\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport uniqid from 'uniqid';\nimport App from './components/App';\n\nconst data = ['text1asd', 'text2', 'text3'].map((item, index) => ({\n  label: item,\n  id: uniqid(),\n  time: Date.now(),\n  timeTodo: new Date(0, 0, 1, 0, index, 0),\n  done: false,\n  editing: false,\n}));\n\nReactDOM.render(<App data={data} />, document.getElementById('root'));\n"],"sourceRoot":""}