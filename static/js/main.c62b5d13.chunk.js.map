{"version":3,"sources":["components/Task.jsx","components/TaskList.jsx","components/Footer.jsx","components/NewTaskForm.jsx","components/App.jsx","index.jsx"],"names":["Task","props","handleChange","event","setState","editValue","target","value","state","data","label","time","this","tick","timerID","setInterval","clearInterval","formatDistanceToNow","Date","onDelete","onToggleDone","onEdit","offEdit","id","done","editing","classes","cn","completed","className","type","checked","onChange","onClick","aria-labelledby","onSubmit","name","React","Component","TaskList","list","map","item","key","Footer","children","clearAll","itemsLeft","TasksFilter","filter","activeFilter","buttons","selected","NewTaskForm","handleInput","clear","addItem","placeholder","App","currentId","otherProps","val","preventDefault","clearCallback","newItem","uniqid","now","i","length","filteredData","ReactDOM","render","document","getElementById"],"mappings":"oSAKqBA,E,kDAenB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAgBRC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAjB1B,EAAKC,MAAQ,CACXH,UAAWJ,EAAMQ,KAAKC,MACtBC,KAAMV,EAAMQ,KAAKE,MAJF,E,gEAQE,IAAD,OAClBC,KAAKC,OACLD,KAAKE,QAAUC,aAAY,kBAAM,EAAKF,SAAQ,O,6CAI9CG,cAAcJ,KAAKE,W,6BASb,IACEL,EAASG,KAAKX,MAAdQ,KACRG,KAAKR,SAAS,CACZO,KAAMM,YAAoB,IAAIC,KAAKT,EAAKE,W,+BAIlC,IAAD,EACqBC,KAAKJ,MAAzBH,EADD,EACCA,UAAWM,EADZ,EACYA,KADZ,EAEmDC,KAAKX,MAAvDQ,EAFD,EAECA,KAAMU,EAFP,EAEOA,SAAUC,EAFjB,EAEiBA,aAAcC,EAF/B,EAE+BA,OAAQC,EAFvC,EAEuCA,QACtCZ,EAA6BD,EAA7BC,MAAOa,EAAsBd,EAAtBc,GAAIC,EAAkBf,EAAlBe,KAAMC,EAAYhB,EAAZgB,QACnBC,EAAUC,IAAG,CACjBC,UAAWJ,EACXC,YAEF,OACE,wBAAII,UAAWH,EAASH,GAAIA,GAC1B,yBAAKM,UAAU,QACb,2BAAOA,UAAU,SAASC,KAAK,WAAWC,QAASP,EAAMQ,SAAUZ,IACnE,+BACE,0BAAMG,GAAE,sBAAiBA,GAAMM,UAAU,eACtCnB,GAEH,0BAAMa,GAAE,yBAAoBA,GAAMM,UAAU,WAA5C,WACWlB,EADX,SAIF,4BAAQmB,KAAK,SAASD,UAAU,iBAAiBI,QAASZ,EAAQa,kBAAA,sBAAgCX,KAClG,4BACEO,KAAK,SACLD,UAAU,oBACVI,QAASd,EACTe,kBAAA,yBAAmCX,MAGtCE,GACC,0BAAMI,UAAU,kBAAkBM,SAAUb,EAAQC,EAAIlB,IACtD,2BAAO+B,KAAK,QAAQN,KAAK,OAAOD,UAAU,OAAOtB,MAAOF,EAAW2B,SAAUpB,KAAKV,eAClF,4BAAQ4B,KAAK,UAAb,Y,GA5EsBO,IAAMC,WC2BzBC,EA5BE,SAAC,GAAuD,IAArD9B,EAAoD,EAApDA,KAAMU,EAA8C,EAA9CA,SAAUC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAClDkB,EAAO/B,EAAKgC,KAAI,SAACC,GAAD,OACpB,kBAAC,EAAD,CACEC,IAAKD,EAAKnB,GACVd,KAAMiC,EACNvB,SAAUA,EAASuB,EAAKnB,IACxBH,aAAcA,EAAasB,EAAKnB,IAChCF,OAAQA,EAAOqB,EAAKnB,IACpBD,QAASA,OAGb,OAAO,wBAAIO,UAAU,aAAaW,ICafI,E,uKAST,IAAD,EACmChC,KAAKX,MAAvC4C,EADD,EACCA,SAAUC,EADX,EACWA,SAAUC,EADrB,EACqBA,UAC5B,OACE,4BAAQlB,UAAU,UAChB,0BAAMA,UAAU,cAAckB,IAA9B,eACCF,EACD,4BAAQf,KAAK,SAASD,UAAU,kBAAkBI,QAASa,GAA3D,wB,GAf4BT,IAAMC,WAArBM,EACZI,YAzBW,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,OAAQC,EAAmB,EAAnBA,aACvBC,EAAU,CACd,CAAEzC,MAAO,MAAOa,GAAI,OACpB,CAAEb,MAAO,SAAUa,GAAI,UACvB,CAAEb,MAAO,YAAaa,GAAI,cAC1BkB,KAAI,YAAoB,IAAjB/B,EAAgB,EAAhBA,MAAOa,EAAS,EAATA,GACRG,EAAUC,IAAG,CACjByB,SAAUF,IAAiB3B,IAE7B,OAAO,wBAAIoB,IAAKpB,GACd,4BAAQO,KAAK,SAASD,UAAWH,EAASH,GAAIA,EAAIU,QAASgB,GAASvC,OAOxE,OACE,wBAAImB,UAAU,WACXsB,I,ICpBcE,E,kDAKnB,WAAYpD,GAAQ,IAAD,8BACjB,cAAMA,IAMRqD,YAAc,SAACnD,GACb,EAAKC,SAAS,CACZG,MAAOJ,EAAMG,OAAOC,SATL,EAanBgD,MAAQ,WACN,EAAKnD,SAAS,CACZG,MAAO,MAbT,EAAKC,MAAQ,CACXD,MAAO,IAHQ,E,qDAmBT,IACAA,EAAUK,KAAKJ,MAAfD,MACAiD,EAAY5C,KAAKX,MAAjBuD,QACR,OACE,0BAAM3B,UAAU,iBAAiBM,SAAUqB,EAAQjD,EAAOK,KAAK2C,QAC7D,2BAAO1B,UAAU,WAAW4B,YAAY,yBAAyBlD,MAAOA,EAAOyB,SAAUpB,KAAK0C,cAC9F,4BAAQxB,KAAK,UAAb,Y,GA9BiCO,IAAMC,WCI1BoB,E,kDAanB,WAAYzD,GAAQ,IAAD,8BACjB,cAAMA,IAORmB,aAAe,SAACuC,GAAD,OAAe,WAC5B,EAAKvD,UAAS,YAWZ,MAAO,CACLK,KAZwB,EAAXA,KACMgC,KAAI,SAACC,GAAU,IAC1BlB,EAAwBkB,EAAxBlB,KAASoC,EADgB,YACDlB,EADC,UAEjC,OAAIA,EAAKnB,KAAOoC,EACP,2BACFC,GADL,IAEEpC,MAAOA,IAGJkB,WAlBM,EA0BnBrB,OAAS,SAACsC,GAAD,OAAe,WACtB,EAAKvD,UAAS,YAWZ,MAAO,CACLK,KAZwB,EAAXA,KACMgC,KAAI,SAACC,GAAU,IAC1BjB,EAA2BiB,EAA3BjB,QAAYmC,EADa,YACElB,EADF,aAEjC,OAAIA,EAAKnB,KAAOoC,EACP,2BACFC,GADL,IAEEnC,SAAUA,IAGPiB,WApCM,EA4CnBpB,QAAU,SAACqC,EAAWE,GAAZ,OAAoB,SAAC1D,GAC7BA,EAAM2D,iBACM,KAARD,GACJ,EAAKzD,UAAS,YAYZ,MAAO,CACLK,KAbwB,EAAXA,KACMgC,KAAI,SAACC,GAAU,IAC1BjB,EAAkCiB,EAAlCjB,QAAmBmC,GAAelB,EAAzBhC,MADgB,YACSgC,EADT,sBAEjC,OAAIA,EAAKnB,KAAOoC,EACP,2BACFC,GADL,IAEEnC,SAAUA,EACVf,MAAOmD,IAGJnB,WAzDM,EAiEnBvB,SAAW,SAACwC,GAAD,OAAe,WACxB,EAAKvD,UAAS,kBAAe,CAC3BK,KADY,EAAGA,KACJwC,QAAO,gBAAG1B,EAAH,EAAGA,GAAH,OAAYoC,IAAcpC,WAnE7B,EAuEnB0B,OAAS,SAAC9C,GACR,EAAKC,SAAS,CACZ8C,aAAc/C,EAAMG,OAAOiB,MAzEZ,EA6EnBiC,QAAU,SAACK,EAAKE,GAAN,OAAwB,SAAC5D,GACjCA,EAAM2D,iBACM,KAARD,GACJ,EAAKzD,UAAS,YAAe,IAAZK,EAAW,EAAXA,KACTuD,EAAU,CACdtD,MAAOmD,EACPtC,GAAI0C,MACJtD,KAAMO,KAAKgD,MACX1C,MAAM,EACNC,SAAS,GAGX,OADAsC,IACO,CACLtD,KAAK,CAAEuD,GAAH,mBAAevD,UA1FN,EA+FnBqC,SAAW,WACT,EAAK1C,SAAS,CACZK,KAAM,MAjGS,EAqGnBsC,UAAY,WAEV,OADiB,EAAKvC,MAAdC,KACIwC,QAAO,SAACkB,GAAD,OAAQA,EAAE3C,QAAM4C,QArGnC,EAAK5D,MAAQ,CACXC,KAAMR,EAAMQ,KACZyC,aAAc,OAJC,E,qDA0GT,IAAD,EACwBtC,KAAKJ,MAA5BC,EADD,EACCA,KAAMyC,EADP,EACOA,aACRmB,EAAe5D,EAAKwC,QAAO,YAAe,IAAZzB,EAAW,EAAXA,KAClC,OAAQ0B,GACN,IAAK,SACH,OAAQ1B,EACV,IAAK,YACH,OAAOA,EACT,QACE,OAAO,MAIb,OACE,6BAASK,UAAU,WACjB,4BAAQA,UAAU,UAChB,qCACA,kBAAC,EAAD,CAAa2B,QAAS5C,KAAK4C,WAE7B,6BAAS3B,UAAU,QACjB,kBAAC,EAAD,CACEpB,KAAM4D,EACNlD,SAAUP,KAAKO,SACfC,aAAcR,KAAKQ,aACnBC,OAAQT,KAAKS,OACbC,QAASV,KAAKU,UAEhB,kBAAC,EAAD,CAAQwB,SAAUlC,KAAKkC,SAAUC,UAAWnC,KAAKmC,WAC/C,kBAAC,EAAOC,YAAR,CAAoBC,OAAQrC,KAAKqC,OAAQC,aAAcA,W,GAnJlCb,IAAMC,WCDjC7B,EAAO,CAAC,WAAY,QAAS,SAASgC,KAAI,SAACC,GAAD,MAAW,CACzDhC,MAAOgC,EACPnB,GAAI0C,MACJtD,KAAMO,KAAKgD,MACX1C,MAAM,EACNC,SAAS,MAGX6C,IAASC,OAAO,kBAAC,EAAD,CAAK9D,KAAMA,IAAU+D,SAASC,eAAe,W","file":"static/js/main.c62b5d13.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport cn from 'classnames';\r\nimport { formatDistanceToNow } from 'date-fns';\r\n\r\nexport default class Task extends React.Component {\r\n  static propTypes = {\r\n    data: PropTypes.exact({\r\n      label: PropTypes.string,\r\n      id: PropTypes.string,\r\n      time: PropTypes.number,\r\n      done: PropTypes.bool,\r\n      editing: PropTypes.bool,\r\n    }).isRequired,\r\n    onDelete: PropTypes.func.isRequired,\r\n    onToggleDone: PropTypes.func.isRequired,\r\n    onEdit: PropTypes.func.isRequired,\r\n    offEdit: PropTypes.func.isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      editValue: props.data.label,\r\n      time: props.data.time,\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.tick();\r\n    this.timerID = setInterval(() => this.tick(), 1000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    clearInterval(this.timerID);\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    this.setState({\r\n      editValue: event.target.value,\r\n    });\r\n  };\r\n\r\n  tick() {\r\n    const { data } = this.props;\r\n    this.setState({\r\n      time: formatDistanceToNow(new Date(data.time)),\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { editValue, time } = this.state;\r\n    const { data, onDelete, onToggleDone, onEdit, offEdit } = this.props;\r\n    const { label, id, done, editing } = data;\r\n    const classes = cn({\r\n      completed: done,\r\n      editing,\r\n    });\r\n    return (\r\n      <li className={classes} id={id}>\r\n        <div className=\"view\">\r\n          <input className=\"toggle\" type=\"checkbox\" checked={done} onChange={onToggleDone} />\r\n          <label>\r\n            <span id={`button-edit-${id}`} className=\"description\">\r\n              {label}\r\n            </span>\r\n            <span id={`button-destroy-${id}`} className=\"created\">\r\n              created {time} ago\r\n            </span>\r\n          </label>\r\n          <button type=\"button\" className=\"icon icon-edit\" onClick={onEdit} aria-labelledby={`button-edit-${id}`} />\r\n          <button\r\n            type=\"button\"\r\n            className=\"icon icon-destroy\"\r\n            onClick={onDelete}\r\n            aria-labelledby={`button-destroy-${id}`}\r\n          />\r\n        </div>\r\n        {editing && (\r\n          <form className=\"editing-wrapper\" onSubmit={offEdit(id, editValue)}>\r\n            <input name=\"input\" type=\"text\" className=\"edit\" value={editValue} onChange={this.handleChange} />\r\n            <button type=\"submit\">OK</button>\r\n          </form>\r\n        )}\r\n      </li>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Task from './Task';\r\n\r\nconst TaskList = ({ data, onDelete, onToggleDone, onEdit, offEdit }) => {\r\n  const list = data.map((item) => (\r\n    <Task\r\n      key={item.id}\r\n      data={item}\r\n      onDelete={onDelete(item.id)}\r\n      onToggleDone={onToggleDone(item.id)}\r\n      onEdit={onEdit(item.id)}\r\n      offEdit={offEdit}\r\n    />\r\n  ));\r\n  return <ul className=\"todo-list\">{list}</ul>;\r\n};\r\nTaskList.propTypes = {\r\n  data: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      label: PropTypes.string,\r\n      id: PropTypes.string,\r\n      time: PropTypes.number,\r\n      done: PropTypes.bool,\r\n      editing: PropTypes.bool,\r\n    })\r\n  ).isRequired,\r\n  onDelete: PropTypes.func.isRequired,\r\n  onToggleDone: PropTypes.func.isRequired,\r\n  onEdit: PropTypes.func.isRequired,\r\n  offEdit: PropTypes.func.isRequired,\r\n};\r\nexport default TaskList;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport cn from 'classnames'\r\n\r\nconst TasksFilter = ({ filter, activeFilter }) => {\r\n  const buttons = [\r\n    { label: 'All', id: 'all'},\r\n    { label: 'Active', id: 'active'},\r\n    { label: 'Completed', id: 'completed'}\r\n  ].map(({ label, id }) => {\r\n    const classes = cn({\r\n      selected: activeFilter === id\r\n    })\r\n    return <li key={id}>\r\n      <button type='button' className={classes} id={id} onClick={filter}>{label}</button>\r\n    </li>\r\n  })\r\n  TasksFilter.propTypes = {\r\n    filter: PropTypes.func.isRequired,\r\n    activeFilter: PropTypes.string.isRequired\r\n  }\r\n  return (\r\n    <ul className=\"filters\">\r\n      {buttons}\r\n    </ul>\r\n  )\r\n}\r\n\r\nexport default class Footer extends React.Component {\r\n  static TasksFilter = TasksFilter\r\n\r\n  static propTypes = {\r\n    children: PropTypes.node.isRequired,\r\n    clearAll: PropTypes.func.isRequired,\r\n    itemsLeft: PropTypes.func.isRequired,\r\n  }\r\n  \r\n  render() {\r\n    const { children, clearAll, itemsLeft } = this.props\r\n    return (\r\n      <footer className=\"footer\">\r\n        <span className=\"todo-count\">{itemsLeft()} items left</span>\r\n        {children}\r\n        <button type='button' className=\"clear-completed\" onClick={clearAll}>Clear completed</button>\r\n      </footer>\r\n    )\r\n  }\r\n}","import React from 'react';\r\nimport PropsTypes from 'prop-types';\r\n\r\nexport default class NewTaskForm extends React.Component {\r\n  static propTypes = {\r\n    addItem: PropsTypes.func.isRequired,\r\n  };\r\n  \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      value: '',\r\n    };\r\n  }\r\n\r\n  handleInput = (event) => {\r\n    this.setState({\r\n      value: event.target.value,\r\n    });\r\n  };\r\n\r\n  clear = () => {\r\n    this.setState({\r\n      value: '',\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { value } = this.state;\r\n    const { addItem } = this.props;\r\n    return (\r\n      <form className=\"adding-wrapper\" onSubmit={addItem(value, this.clear)}>\r\n        <input className=\"new-todo\" placeholder=\"What needs to be done?\" value={value} onChange={this.handleInput} />\r\n        <button type=\"submit\">ADD</button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport uniqid from 'uniqid';\r\nimport TaskList from './TaskList';\r\nimport Footer from './Footer';\r\nimport NewTaskForm from './NewTaskForm';\r\n\r\nexport default class App extends React.Component {\r\n  static propTypes = {\r\n    data: PropTypes.arrayOf(\r\n      PropTypes.shape({\r\n        label: PropTypes.string,\r\n        id: PropTypes.string,\r\n        time: PropTypes.number,\r\n        done: PropTypes.bool,\r\n        editing: PropTypes.bool,\r\n      })\r\n    ).isRequired,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: props.data,\r\n      activeFilter: 'all',\r\n    };\r\n  }\r\n\r\n  onToggleDone = (currentId) => () => {\r\n    this.setState(({ data }) => {\r\n      const newData = data.map((item) => {\r\n        const { done, ...otherProps } = item;\r\n        if (item.id === currentId) {\r\n          return {\r\n            ...otherProps,\r\n            done: !done,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        data: newData,\r\n      };\r\n    });\r\n  };\r\n\r\n  onEdit = (currentId) => () => {\r\n    this.setState(({ data }) => {\r\n      const newData = data.map((item) => {\r\n        const { editing, ...otherProps } = item;\r\n        if (item.id === currentId) {\r\n          return {\r\n            ...otherProps,\r\n            editing: !editing,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        data: newData,\r\n      };\r\n    });\r\n  };\r\n\r\n  offEdit = (currentId, val) => (event) => {\r\n    event.preventDefault();\r\n    if (val === '') return;\r\n    this.setState(({ data }) => {\r\n      const newData = data.map((item) => {\r\n        const { editing, label, ...otherProps } = item;\r\n        if (item.id === currentId) {\r\n          return {\r\n            ...otherProps,\r\n            editing: !editing,\r\n            label: val,\r\n          };\r\n        }\r\n        return item;\r\n      });\r\n      return {\r\n        data: newData,\r\n      };\r\n    });\r\n  };\r\n\r\n  onDelete = (currentId) => () => {\r\n    this.setState(({ data }) => ({\r\n      data: data.filter(({ id }) => currentId !== id),\r\n    }));\r\n  };\r\n\r\n  filter = (event) => {\r\n    this.setState({\r\n      activeFilter: event.target.id,\r\n    });\r\n  };\r\n\r\n  addItem = (val, clearCallback) => (event) => {\r\n    event.preventDefault();\r\n    if (val === '') return;\r\n    this.setState(({ data }) => {\r\n      const newItem = {\r\n        label: val,\r\n        id: uniqid(),\r\n        time: Date.now(),\r\n        done: false,\r\n        editing: false,\r\n      };\r\n      clearCallback();\r\n      return {\r\n        data: [newItem, ...data],\r\n      };\r\n    });\r\n  };\r\n\r\n  clearAll = () => {\r\n    this.setState({\r\n      data: [],\r\n    });\r\n  };\r\n\r\n  itemsLeft = () => {\r\n    const { data } = this.state;\r\n    return data.filter((i) => !i.done).length;\r\n  };\r\n\r\n  render() {\r\n    const { data, activeFilter } = this.state;\r\n    const filteredData = data.filter(({ done }) => {\r\n      switch (activeFilter) {\r\n        case 'active':\r\n          return !done;\r\n        case 'completed':\r\n          return done;\r\n        default:\r\n          return true;\r\n      }\r\n    });\r\n\r\n    return (\r\n      <section className=\"todoapp\">\r\n        <header className=\"header\">\r\n          <h1>todos</h1>\r\n          <NewTaskForm addItem={this.addItem} />\r\n        </header>\r\n        <section className=\"main\">\r\n          <TaskList\r\n            data={filteredData}\r\n            onDelete={this.onDelete}\r\n            onToggleDone={this.onToggleDone}\r\n            onEdit={this.onEdit}\r\n            offEdit={this.offEdit}\r\n          />\r\n          <Footer clearAll={this.clearAll} itemsLeft={this.itemsLeft}>\r\n            <Footer.TasksFilter filter={this.filter} activeFilter={activeFilter} />\r\n          </Footer>\r\n        </section>\r\n      </section>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport uniqid from 'uniqid';\r\nimport App from './components/App';\r\n\r\nconst data = [\"text1asd\", \"text2\", \"text3\"].map((item) => ({\r\n  label: item,\r\n  id: uniqid(),\r\n  time: Date.now(),\r\n  done: false,\r\n  editing: false,\r\n}));\r\n\r\nReactDOM.render(<App data={data} />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}